{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"shplot","text":"<p>shplot is a Python library wrapper for managing Matplotlib configuration through profiles, and provides a number of built-in profiles suitable for different use cases.</p>"},{"location":"#installation","title":"Installation","text":"<p>shplot is available on PyPI, and can be installed with <code>pip</code>:</p> <pre><code>pip install shplot\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Common use cases are shown here. Refer to the documentation for in-depth usage. The project repository\u2019s <code>demos/</code> folder contains illustrations of the built-in profiles. The demo files can be (re)generated by running <code>scripts/plot_demos.py</code>.</p>"},{"location":"#create-a-plot-and-use-it-in-a-context","title":"Create a plot and use it in a context","text":"<pre><code>&gt;&gt;&gt; from shplot import ShPlot\n&gt;&gt;&gt; plot = ShPlot(builtin_profile_name=\"paper\")\n&gt;&gt;&gt; with plot.context(nrows=2, ncols=2) as (fig, axs):\n...     # `axs` is a 2x2 array.\n...     pass\n&gt;&gt;&gt; with plot.context(mosaic=\"AAB\\nC.B\") as (fig, axs):\n...     # `axs` is a dictionary.\n...     pass\n</code></pre>"},{"location":"#update-matplotlib-settings-using-a-profile","title":"Update Matplotlib settings using a profile","text":"<pre><code>&gt;&gt;&gt; from shplot.profiles import ColorProfile\n&gt;&gt;&gt; profile = ColorProfile(fg=\"yellow\", bg=\"black\")\n&gt;&gt;&gt; profile.config()  # will update `matplotlib.rcParams`\n</code></pre>"},{"location":"#use-a-built-in-profile-with-overrides","title":"Use a built-in profile with overrides","text":"<pre><code>&gt;&gt;&gt; from shplot import ShPlot\n&gt;&gt;&gt; from shplot.profiles.builtin import ShPaperProfile\n&gt;&gt;&gt; profile = ShPaperProfile(fontname=\"fira\", **{\"axes.grid\": True})\n&gt;&gt;&gt; profile.config()\n</code></pre>"},{"location":"#create-a-plot-using-command-line-arguments","title":"Create a plot using command line arguments","text":"<p><code>main.py</code></p> <pre><code>from shplot import ShPlot\n\nplot = ShPlot.parse_from_cmdline()\nwith plot.context() as (fig, ax):\n    ...\n</code></pre> <pre><code>$ python main.py -h\nusage: main.py [-h] [--file str] [--shprofile str] [--profile-args key=val,...] [--width\n  float] [--aspect float[;float]]\n\noptions:\n  -h/--help                   show this help message and exit\n  --file str                  Plot save file (extension will be added if not provided).\n                              (optional)\n  --shprofile str             Name of a built-in profile.\n                              ({paper/book/web_light/web_dark/presentation} optional)\n  --profile-args key=val,...  Arguments for the builtin-profile. Refer to the individual\n                              profiles for details. (optional)\n  --width float               Plot width, in inches (if greater than 1), or as a fraction of\n                              the configured plot width (if less than or equal to 1).\n                              (optional)\n  --aspect float[;float]      Plot aspect ratio, width/height. When provided as a command\n                              line argument, can be passed as a single number or a ratio in\n                              the form `&lt;WIDTH&gt;;&lt;HEIGHT&gt;`. (optional)\n</code></pre>"},{"location":"LICENSE/","title":"MIT License","text":"<p>Copyright (c) Jayanth Koushik</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"usage/SUMMARY/","title":"SUMMARY","text":"<ul> <li>shplot<ul> <li>profiles<ul> <li>builtin</li> </ul> </li> </ul> </li> </ul>"},{"location":"usage/shplot/","title":"shplot","text":""},{"location":"usage/shplot/#shplot._shplot.ShPlot","title":"<code> ShPlot            (Corgy)         </code>","text":"<p>Wrapper around a Matplotlib figure.</p> <p><code>ShPlot</code> represents a single figure, optionally associated with a built-in profile from <code>SH_BUILTIN_PROFILES</code>.</p> <p><code>ShPlot</code> inherits from <code>Corgy</code>, which provides a dataclass like interface. Public attributes are exposed as properties, and can also be set during initialization as keyword-only arguments. All attributes are optional; refer to their descriptions for details. Refer to the Corgy docs for details on the interface.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from tempfile import NamedTemporaryFile\n&gt;&gt;&gt; from shplot import ShPlot\n&gt;&gt;&gt; with NamedTemporaryFile() as save_file:\n...     shplot = ShPlot(\n...         file=save_file.name,\n...         builtin_profile_name=\"paper\",\n...         width=3.0,\n...         aspect=3/2,\n...     )\n...     fig, ax = shplot.open()  # also activates paper profile\n...     _ = ax.scatter([1, 2, 3], [3, 2, 1])\n...     shplot.close()  # saves plot and restores `rcParams`\n...     # `ShPlot` can also be used as a context manager.\n...     with shplot.context() as (fig, ax):\n...         pass\n...     # `shplot.close` will be called automatically.\n</code></pre> <pre><code>&gt;&gt;&gt; from argparse import ArgumentParser\n&gt;&gt;&gt; argparser = ArgumentParser(add_help=False, usage=\"\")\n&gt;&gt;&gt; ShPlot.add_args_to_parser(argparser)\n&gt;&gt;&gt; print(\n...     argparser.format_help().replace(\n...         # This is to prevent the doctest from failing\n...         # in Python 3.9, where the 'options' section\n...         # has a different name.\n...         \"optional arguments:\", \"options:\"\n...     )\n... )\nusage:\n\noptions:\n  --file FILE           Plot save file (extension will be\n                        added if not provided).\n  --shprofile {paper,book,web_light,web_dark,presentation}\n                        Name of a built-in profile.\n  --profile-args key=val,...\n                        Arguments for the builtin-profile.\n                        Refer to the individual profiles for\n                        details.\n  --width WIDTH         Plot width, in inches (if greater than\n                        1), or as a fraction of the configured\n                        plot width (if less than or equal to 1).\n  --aspect float[;float]\n                        Plot aspect ratio, width/height. When\n                        provided as a command line argument,\n                        can be passed as a single number or a\n                        ratio in the form `&lt;WIDTH&gt;;&lt;HEIGHT&gt;`.\n&gt;&gt;&gt; args = argparser.parse_args(\n...     [\"--width\", \"3\", \"--aspect\", \"3;2\"]\n... )\n&gt;&gt;&gt; shplot = ShPlot.from_dict(vars(args))\n&gt;&gt;&gt; shplot\nShPlot(width=3.0, aspect=1.5)\n</code></pre>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.aspect","title":"<code>aspect: float</code>  <code>property</code> <code>writable</code>","text":"<p>Plot aspect ratio, width/height. When provided as a command line argument, can be passed as a single number or a ratio in the form <code>&lt;WIDTH&gt;;&lt;HEIGHT&gt;</code>.</p>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.builtin_profile_name","title":"<code>builtin_profile_name: Literal['paper', 'book', 'web_light', 'web_dark', 'presentation']</code>  <code>property</code> <code>writable</code>","text":"<p>Name of a built-in profile.</p>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.file","title":"<code>file: str</code>  <code>property</code> <code>writable</code>","text":"<p>Plot save file (extension will be added if not provided).</p>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.profile_args","title":"<code>profile_args: KeyValuePairs</code>  <code>property</code> <code>writable</code>","text":"<p>Arguments for the builtin-profile. Refer to the individual profiles for details.</p>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.width","title":"<code>width: float</code>  <code>property</code> <code>writable</code>","text":"<p>Plot width, in inches (if greater than 1), or as a fraction of the configured plot width (if less than or equal to 1).</p>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.get_plot_size","title":"<code>get_plot_size(self) -&gt; tuple[float, float]</code>","text":"<p>Get computed plot size.</p> <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>Tuple with (width, height) in inches.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from shplot import ShPlot\n&gt;&gt;&gt; plot = ShPlot(width=3.0, aspect=3/2)\n&gt;&gt;&gt; plot.get_plot_size()\n(3.0, 2.0)\n</code></pre>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.get_plot_path","title":"<code>get_plot_path(self) -&gt; Optional[Path]</code>","text":"<p>Get the plot save path.</p> <p>Returns:</p> Type Description <code>Optional[Path]</code> <p>Plot save file (<code>pathlib.Path</code> instance) with added extension, or <code>None</code> if not configured.</p> <p>Note</p> <p>The path extension depends on the matplotlib backend, so this method\u2019s return value might change after opening the plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import matplotlib as mpl\n&gt;&gt;&gt; from shplot import ShPlot\n&gt;&gt;&gt; mpl.use(\"agg\")\n</code></pre> <pre><code>&gt;&gt;&gt; plot = ShPlot(file=\"foo\", builtin_profile_name=\"paper\")\n&gt;&gt;&gt; str(plot.get_plot_path())\n'foo.png'\n&gt;&gt;&gt; _ = plot.open()\n&gt;&gt;&gt; str(plot.get_plot_path())\n'foo.pdf'\n</code></pre> <pre><code>&gt;&gt;&gt; plot = ShPlot()\n&gt;&gt;&gt; plot.get_plot_path()  # returns `None`\n</code></pre> <pre><code>&gt;&gt;&gt; plot = ShPlot(file=\"foo.eps\")\n&gt;&gt;&gt; str(plot.get_plot_path())\n'foo.eps'\n</code></pre>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.open","title":"<code>open(self, mosaic: MosaicType = None, **kwargs: Any) -&gt; tuple[Figure, Any]</code>","text":"<p>Open the plot, and activate its profile if present.</p> <p>The plot is opened by calling <code>matplotlib.pyplot.subplots</code>, or <code>matplotlib.pyplot.subplot_mosaic</code> if the mosaic argument is provided. All other arguments are passed to the underlying functions. Refer to the Matplotlib docs for details.</p> <p>Note</p> <p>It is an error to call this function on an open plot.</p> <p>Parameters:</p> Name Type Description Default <code>mosaic</code> <code>MosaicType</code> <p>If not <code>None</code>, plot is opened using <code>subplot_mosaic</code> instead of <code>subplots</code>.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Passed to <code>subplots</code> or <code>subplot_mosaic</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>tuple[Figure, Any]</code> <p>(Figure, Axes) tuple, as returned by the underlying Matplotlib function. The first value is always an instance of <code>matplotlib.figure.Figure</code>. The second value depends on the arguments; it can be a single <code>matplotlib.axes.Axes</code>, or an array, or a dictionary.</p>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.close","title":"<code>close(self) -&gt; None</code>","text":"<p>Close the plot.</p> <p>Note</p> <p>It is an error to call this function on an unopened plot.</p>"},{"location":"usage/shplot/#shplot._shplot.ShPlot.context","title":"<code>context(self, mosaic: MosaicType = None, **kwargs: Any) -&gt; Iterator[tuple[Figure, Any]]</code>","text":"<p>Context manager wrapper which opens and closes the plot.</p> <p>This function allows <code>ShPlot</code> instances to be used in a <code>with</code> statement; the plot is opened on entering the <code>with</code> block, and is closed on exiting. Arguments are passed directly to <code>ShPlot.open</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from shplot import ShPlot\n&gt;&gt;&gt; shplot = ShPlot()\n&gt;&gt;&gt; with shplot.context() as (fig, ax):\n...     pass\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>mosaic</code> <code>MosaicType</code> <p>If not <code>None</code>, plot is opened using <code>subplot_mosaic</code> instead of <code>subplots</code>.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Passed to <code>subplots</code> or <code>subplot_mosaic</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Iterator[tuple[Figure, Any]]</code> <p>Generator context with return value from <code>ShPlot.open</code>.</p> <p>Note</p> <p>It is an error to call this function on an opened plot, or to call <code>open</code> while the context is active.</p>"},{"location":"usage/shplot/profiles/","title":"shplot.profiles","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ProfileBase","title":"<code> ProfileBase            (Corgy)         </code>","text":"<p>Base class for profiles.</p> <p>Profile classes are thin wrappers around subsets of Matplotlib parameters. Once instantiated, they can be used to generate a dictionary, which can be used to update <code>matplotlib.rcParams</code>.</p> <p>Profile classes have a dataclass-like interface. All attributes are exposed as properties, and can be set either at initialization (as keyword arguments) or later. Unless specified otherwise, attributes directly correspond to Matplotlib parameters with the same name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from shplot.profiles import ColorProfile\n&gt;&gt;&gt; profile = ColorProfile(fg_secondary=\"gray\")\n&gt;&gt;&gt; profile.rc()\n{'grid.color': 'gray', 'legend.edgecolor': 'gray'}\n</code></pre> <pre><code>&gt;&gt;&gt; profile.grid_alpha = 0.5\n&gt;&gt;&gt; profile.rc()\n{'grid.color': 'gray', 'legend.edgecolor': 'gray',\n'grid.alpha': 0.5}\n</code></pre>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ProfileBase.rc","title":"<code>rc(self) -&gt; dict[str, Any]</code>","text":"<p>Get profile configuration.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with <code>rcParams</code>. Unset attributes are not included in the returned dictionary so that different profiles can be combined together.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ProfileBase.config","title":"<code>config(self, reload_mpl: bool = True) -&gt; None</code>","text":"<p>Update <code>matplotlib.rcParams</code> with profile configuration.</p> <p>Parameters:</p> Name Type Description Default <code>reload_mpl</code> <code>bool</code> <p>Whether to reload <code>matplotlib</code> and <code>pyplot</code> modules before applying the configuration. Reloading is necessary for fonts to be updated.</p> <code>True</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import matplotlib as mpl\n&gt;&gt;&gt; print(mpl.rcParams[\"grid.color\"])\n#b0b0b0\n&gt;&gt;&gt; color_prof = ColorProfile(fg_secondary=\"gray\")\n&gt;&gt;&gt; color_prof.config()\n&gt;&gt;&gt; print(mpl.rcParams[\"grid.color\"])\ngray\n</code></pre>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ProfileBase.context","title":"<code>context(self, reload_mpl: bool = True) -&gt; Generator[None, None, None]</code>","text":"<p>Context manager for <code>config</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>reload_mpl</code> <code>bool</code> <p>Whether to first reload <code>matplotlib</code> and <code>pyplot</code> modules.</p> <code>True</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; mpl.rcParams[\"grid.color\"] = 'black'\n&gt;&gt;&gt; print(mpl.rcParams[\"grid.color\"])\nblack\n&gt;&gt;&gt; color_prof = ColorProfile(fg_secondary=\"red\")\n&gt;&gt;&gt; with color_prof.context():\n...     print(mpl.rcParams[\"grid.color\"])\nred\n&gt;&gt;&gt; print(mpl.rcParams[\"grid.color\"])\nblack\n</code></pre>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ColorProfile","title":"<code> ColorProfile            (ProfileBase)         </code>","text":"<p>Wrapper for color related Matplotlib params.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ColorProfile.bg","title":"<code>bg: str</code>  <code>property</code> <code>writable</code>","text":"<p>Axes and figure face color.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ColorProfile.fg","title":"<code>fg: str</code>  <code>property</code> <code>writable</code>","text":"<p>Primary foreground color, used for text, axes lines, ticks, etc.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ColorProfile.fg_secondary","title":"<code>fg_secondary: str</code>  <code>property</code> <code>writable</code>","text":"<p>Secondary foreground color, used for grid lines and legend frame.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ColorProfile.grid_alpha","title":"<code>grid_alpha: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ColorProfile.legend_frame_alpha","title":"<code>legend_frame_alpha: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ColorProfile.palette","title":"<code>palette: list[str]</code>  <code>property</code> <code>writable</code>","text":"<p><code>axes.prop_cycle</code> colors.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.ColorProfile.transparent","title":"<code>transparent: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to save figures with transparent background.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile","title":"<code> FontProfile            (ProfileBase)         </code>","text":"<p>Wrapper for font related Matplotlib params.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.cursive","title":"<code>cursive: list[str]</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.custom_math_bf","title":"<code>custom_math_bf: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.custom_math_cal","title":"<code>custom_math_cal: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.custom_math_it","title":"<code>custom_math_it: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.custom_math_rm","title":"<code>custom_math_rm: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.custom_math_sf","title":"<code>custom_math_sf: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.custom_math_tt","title":"<code>custom_math_tt: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.family","title":"<code>family: list[str]</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.fantasy","title":"<code>fantasy: list[str]</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.latex_preamble","title":"<code>latex_preamble: list[str]</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.math_default","title":"<code>math_default: Literal['rm', 'cal', 'it', 'tt', 'sf', 'bf', 'default', 'bb', 'frak', 'scr', 'regular']</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.math_fallback","title":"<code>math_fallback: Literal['cm', 'stix', 'stixsans', 'None']</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.math_fontset","title":"<code>math_fontset: Literal['dejavusans', 'dejavuserif', 'cm', 'stix', 'stixsans', 'custom']</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.monospace","title":"<code>monospace: list[str]</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.pgf_rcfonts","title":"<code>pgf_rcfonts: bool</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.sans_serif","title":"<code>sans_serif: list[str]</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.serif","title":"<code>serif: list[str]</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.set_pgf_preamble","title":"<code>set_pgf_preamble: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to set <code>pgf.preamble</code> using <code>latex_preamble</code>.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.stretch","title":"<code>stretch: Literal['ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', 'wider', 'narrower']</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.style","title":"<code>style: Literal['normal', 'italic', 'oblique']</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.text_usetex","title":"<code>text_usetex: bool</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.variant","title":"<code>variant: Literal['normal', 'small-caps']</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FontProfile.weight","title":"<code>weight: Literal['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.FloatOrStr","title":"<code> FloatOrStr            (ABC)         </code>","text":"<p>Float or string type.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile","title":"<code> PlotScaleProfile            (ProfileBase)         </code>","text":"<p>Wrapper for scale related Matplotlib params.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.autolayout","title":"<code>autolayout: bool</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.axes_label_size","title":"<code>axes_label_size: FloatOrStr</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.axes_title_size","title":"<code>axes_title_size: FloatOrStr</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.constrained_layout","title":"<code>constrained_layout: bool</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.constrained_layout_hspace","title":"<code>constrained_layout_hspace: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.constrained_layout_wspace","title":"<code>constrained_layout_wspace: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.default_aspect_wh","title":"<code>default_aspect_wh: float</code>  <code>property</code> <code>writable</code>","text":"<p>Default figure aspect ratio (width/height).</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.figure_label_size","title":"<code>figure_label_size: FloatOrStr</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.figure_title_size","title":"<code>figure_title_size: FloatOrStr</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.font_size","title":"<code>font_size: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.full_width_in","title":"<code>full_width_in: float</code>  <code>property</code> <code>writable</code>","text":"<p>Default figure width in inches.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.legend_font_size","title":"<code>legend_font_size: FloatOrStr</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.legend_marker_scale","title":"<code>legend_marker_scale: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.legend_title_size","title":"<code>legend_title_size: FloatOrStr</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.line_width","title":"<code>line_width: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.marker_size","title":"<code>marker_size: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.subplot_bottom","title":"<code>subplot_bottom: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.subplot_hspace","title":"<code>subplot_hspace: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.subplot_left","title":"<code>subplot_left: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.subplot_right","title":"<code>subplot_right: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.subplot_top","title":"<code>subplot_top: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.subplot_wspace","title":"<code>subplot_wspace: float</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.xtick_label_size","title":"<code>xtick_label_size: FloatOrStr</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlotScaleProfile.ytick_label_size","title":"<code>ytick_label_size: FloatOrStr</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile","title":"<code> AxesProfile            (ProfileBase)         </code>","text":"<p>Wrapper for axes related Matplotlib params.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.axis_below","title":"<code>axis_below: Literal['all', 'line', 'none']</code>  <code>property</code> <code>writable</code>","text":"<p>Where to draw axis grid lines and ticks.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.grid_axes","title":"<code>grid_axes: Literal['x', 'y', 'both', 'none']</code>  <code>property</code> <code>writable</code>","text":"<p>Which axes to draw grid lines on.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.grid_lines","title":"<code>grid_lines: Literal['major', 'minor', 'both']</code>  <code>property</code> <code>writable</code>","text":"<p>Which grid lines to draw.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.spines","title":"<code>spines: set[Literal['left', 'right', 'bottom', 'top']]</code>  <code>property</code> <code>writable</code>","text":"<p>Which sides to draw spines on.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.xlabel_position","title":"<code>xlabel_position: Literal['left', 'center', 'right']</code>  <code>property</code> <code>writable</code>","text":"<p>Position of x-axis label.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.xlabels_bottom","title":"<code>xlabels_bottom: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to show labels on the bottom x-axis.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.xlabels_top","title":"<code>xlabels_top: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to show labels on the top x-axis.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.xtick_alignment","title":"<code>xtick_alignment: Literal['left', 'center', 'right']</code>  <code>property</code> <code>writable</code>","text":"<p>Alignment of x-axis tick labels.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.xtick_direction","title":"<code>xtick_direction: Literal['in', 'out', 'inout']</code>  <code>property</code> <code>writable</code>","text":"<p>Direction of x-axis ticks.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.xticks_bottom","title":"<code>xticks_bottom: Literal['none', 'major', 'both']</code>  <code>property</code> <code>writable</code>","text":"<p>Which tick lines to draw on the bottom x-axis.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.xticks_top","title":"<code>xticks_top: Literal['none', 'major', 'both']</code>  <code>property</code> <code>writable</code>","text":"<p>Which tick lines to draw on the top x-axis.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.ylabel_position","title":"<code>ylabel_position: Literal['bottom', 'center', 'top']</code>  <code>property</code> <code>writable</code>","text":"<p>Position of y-axis labels.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.ylabels_left","title":"<code>ylabels_left: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to show labels on the left y-axis.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.ylabels_right","title":"<code>ylabels_right: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to show labels on the right y-axis.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.ytick_alignment","title":"<code>ytick_alignment: Literal['bottom', 'center', 'top', 'baseline', 'center_baseline']</code>  <code>property</code> <code>writable</code>","text":"<p>Alignment of y-axis tick labels.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.ytick_direction","title":"<code>ytick_direction: Literal['in', 'out', 'inout']</code>  <code>property</code> <code>writable</code>","text":"<p>Direction of y-axis ticks.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.yticks_left","title":"<code>yticks_left: Literal['none', 'major', 'both']</code>  <code>property</code> <code>writable</code>","text":"<p>Which tick lines to draw on the left y-axis.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.AxesProfile.yticks_right","title":"<code>yticks_right: Literal['none', 'major', 'both']</code>  <code>property</code> <code>writable</code>","text":"<p>Which tick lines to draw on the right y-axis.</p>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlottingProfile","title":"<code> PlottingProfile            (ProfileBase)         </code>","text":"<p>Wrapper for color, font, scale, and axes profiles.</p> <p>All arguments for initialization are optional, and must be passed as keyword arguments. Arguments other than <code>color</code>, <code>font</code>, <code>scale</code>, and <code>axes</code> are used to update <code>matplotlib.rcParams</code> directly, and will override any values set by the profile.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from shplot.profiles import PlottingProfile, ColorProfile\n&gt;&gt;&gt; color_profile = ColorProfile(fg_secondary=\"gray\")\n&gt;&gt;&gt; rc_extra = {\"backend\": \"Agg\", \"legend.edgecolor\": \"black\"}\n&gt;&gt;&gt; profile = PlottingProfile(color=color_profile, **rc_extra)\n&gt;&gt;&gt; profile.rc()\n{'grid.color': 'gray', 'legend.edgecolor': 'black',\n'backend': 'Agg'}\n</code></pre>"},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlottingProfile.axes","title":"<code>axes: AxesProfile</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlottingProfile.color","title":"<code>color: ColorProfile</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlottingProfile.font","title":"<code>font: FontProfile</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/#shplot.profiles._interface.PlottingProfile.scale","title":"<code>scale: PlotScaleProfile</code>  <code>property</code> <code>writable</code>","text":""},{"location":"usage/shplot/profiles/builtin/","title":"shplot.profiles.builtin","text":""},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.CUD_PALETTE","title":"<code>CUD_PALETTE</code>","text":"<p>Color Universal Design (CUD) palette.</p> <p>This is a palette that is unambiguous to both colorblind and non-colorblind people. See https://jfly.uni-koeln.de/color/ for details.</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.SH_BUILTIN_PROFILES","title":"<code>SH_BUILTIN_PROFILES: dict[str, collections.abc.Callable[..., shplot.profiles._interface.PlottingProfile]]</code>","text":"<p>Built-in plotting profiles with set values for different contexts.</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.sh_rc_overrides","title":"<code>sh_rc_overrides</code>","text":""},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShLightCUDProfile","title":"<code> ShLightCUDProfile            (ColorProfile)         </code>","text":"<p>Black on white color profile with CUD palette.</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.BSLightCUDProfile","title":"<code> BSLightCUDProfile            (ColorProfile)         </code>","text":"<p>Bootstrap light theme color profile with CUD palette.</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.BSDarkCUDProfile","title":"<code> BSDarkCUDProfile            (ColorProfile)         </code>","text":"<p>Bootstrap dark theme color profile with CUD palette.</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShScaleProfile","title":"<code> ShScaleProfile            (PlotScaleProfile)         </code>","text":"<p>Builder for scale profiles.</p> <p>Parameters:</p> Name Type Description Default <code>fs</code> <code>float</code> <p>Base font size (in points).</p> required <code>fs_small</code> <code>float</code> <p>Small font size (in points).</p> required <code>fs_smaller</code> <code>float</code> <p>Smaller font size (in points).</p> required <code>fs_large</code> <code>float</code> <p>Large font size (in points).</p> required <code>marker_size</code> <code>float</code> <p>Default marker size (in points).</p> required <code>line_width</code> <code>float</code> <p>Default line width (in points).</p> required <code>full_width_in</code> <code>float</code> <p>Default figure width (in inches).</p> required"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShPaperScaleProfile","title":"<code> ShPaperScaleProfile            (ShScaleProfile)         </code>","text":"<p>Scale profile for a 10pt document.</p> <p>Font sizes correspond to relative LaTeX font sizes for 10pt documents:</p> <ul> <li>\\normalsize: 10pt</li> <li>\\small: 9pt</li> <li>\\footnotesize: 8pt</li> <li>\\large: 12pt</li> </ul>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShBookScaleProfile","title":"<code> ShBookScaleProfile            (ShScaleProfile)         </code>","text":"<p>Scale profile for a 12pt document.</p> <p>Font sizes correspond to relative LaTeX font sizes for 12pt documents:</p> <ul> <li>\\normalsize: 12pt</li> <li>\\small: 10.95pt</li> <li>\\footnotesize: 10pt</li> <li>\\large: 14.4pt</li> </ul>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShWebScaleProfile","title":"<code> ShWebScaleProfile            (_ShWebScaleProfile)         </code>","text":"<p>Scale profile for display on the web.</p> <p>Sizes are for a 16px font size at 96dpi (CSS reference px).</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShPresentationScaleProfile","title":"<code> ShPresentationScaleProfile            (_ShWebScaleProfile)         </code>","text":"<p>Scale profile for presentations.</p> <p>Sizes are based on 48px font size, and will be scaled based on dpi.</p> <p>Parameters:</p> Name Type Description Default <code>dpi</code> <code>float</code> <p>Scale for converting pixel sizes to points.</p> required"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShFontsetupFontProfile","title":"<code> ShFontsetupFontProfile            (FontProfile)         </code>","text":"<p>LaTeX font profile using the fontsetup package.</p> <p>See https://www.ctan.org/pkg/fontsetup for details on the package. This profile simply sets the latex preamble to load the package with the given font.</p> <p>Parameters:</p> Name Type Description Default <code>font</code> <code>FontType</code> <p>One of the fonts supported by fontsetup. This value is passed as the sole argument to the package.</p> <code>'default'</code>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShFontsetupFontProfile.FontType","title":"<code>FontType</code>","text":""},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShPGFRcFontsFontProfile","title":"<code> ShPGFRcFontsFontProfile            (FontProfile)         </code>","text":"<p>LaTeX font profile combining fontsetup with system fonts.</p> <p>This profile loads the fontsetup package with the given font as in <code>ShFontsetupFontProfile</code>, but also sets <code>pgf.rcfonts</code> to <code>True</code>, so that Matplotlib will insert <code>fontspec</code> commands into the LaTeX preamble to set serif/sans-serif/monospace fonts.</p> <p>Parameters:</p> Name Type Description Default <code>family</code> <code>Literal['serif', 'sans-serif', 'monospace']</code> <p>Default font family.</p> <code>'serif'</code> <code>base_font</code> <code>ShFontsetupFontProfile.FontType</code> <p>One of the fonts supported by fontsetup. This value is passed as the sole argument to the package.</p> <code>'default'</code> <code>serif</code> <code>Optional[str]</code> <p>Override for serif font. If <code>None</code>, <code>font.serif</code> from <code>rcParams</code> will be used.</p> <code>None</code> <code>sans_serif</code> <code>Optional[str]</code> <p>Override for sans-serif font. If <code>None</code>, <code>font.sans-serif</code> from <code>rcParams</code> will be used.</p> <code>None</code> <code>monospace</code> <code>Optional[str]</code> <p>Override for monospace font. If <code>None</code>, <code>font.monospace</code> from <code>rcParams</code> will be used.</p> <code>None</code>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShPrintAxesProfile","title":"<code> ShPrintAxesProfile            (AxesProfile)         </code>","text":"<p>Axes profile for print.</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShWebAxesProfile","title":"<code> ShWebAxesProfile            (AxesProfile)         </code>","text":"<p>Axes profile for web.</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShPresentationAxesProfile","title":"<code> ShPresentationAxesProfile            (AxesProfile)         </code>","text":"<p>Axes profile for presentation.</p>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShPaperProfile","title":"<code> ShPaperProfile            (_ShFontsetupProfile)         </code>","text":"<p>Profile for generating figures for a paper (10pt).</p> <p>Parameters:</p> Name Type Description Default <code>fontname</code> <code>ShFontsetupFontProfile.FontType</code> <p>Name of the font to use\u2013see <code>ShFontsetupFontProfile</code>.</p> <code>'default'</code> <code>**rc_extra</code> <code>Any</code> <p><code>rcParams</code> overrides.</p> <code>{}</code>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShBookProfile","title":"<code> ShBookProfile            (_ShFontsetupProfile)         </code>","text":"<p>Profile for generating figures for a book (12pt).</p> <p>Parameters:</p> Name Type Description Default <code>fontname</code> <code>ShFontsetupFontProfile.FontType</code> <p>Name of the font to use\u2013see <code>ShFontsetupFontProfile</code>.</p> <code>'default'</code> <code>**rc_extra</code> <code>Any</code> <p><code>rcParams</code> overrides.</p> <code>{}</code>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShWebProfile","title":"<code> ShWebProfile            (PlottingProfile)         </code>","text":"<p>Profile for generating figures for the web.</p> <p>Parameters:</p> Name Type Description Default <code>theme</code> <code>Literal['light', 'dark']</code> <p>Color theme\u2013\u2018light\u2019 will generate figures on a light background, and \u2018dark\u2019 will generate figures on a dark background.</p> required <code>font_family</code> <code>Literal['serif', 'sans-serif', 'monospace', 'fantasy', 'cursive']</code> <p>Default font family.</p> <code>'sans-serif'</code> <code>sans_serif_font</code> <code>Optional[str]</code> <p>Optional override for default sans-serif font.</p> <code>None</code> <code>serif_font</code> <code>Optional[str]</code> <p>Optional override for default serif font.</p> <code>None</code> <code>monospace_font</code> <code>Optional[str]</code> <p>Optional override for default monospace font.</p> <code>None</code> <code>cursive_font</code> <code>Optional[str]</code> <p>Optional override for default cursive font.</p> <code>None</code> <code>fantasy_font</code> <code>Optional[str]</code> <p>Optional override for default fantasy font.</p> <code>None</code> <code>math_font</code> <code>Optional[Literal['dejavusans', 'dejavuserif', 'cm', 'stix', 'stixsans']]</code> <p>Optional override for default math font.</p> <code>None</code> <code>**rc_extra</code> <code>Any</code> <p><code>rcParams</code> overrides.</p> <code>{}</code>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.ShPresentationProfile","title":"<code> ShPresentationProfile            (PlottingProfile)         </code>","text":"<p>Profile for generating figures for presentations.</p> <p>Parameters:</p> Name Type Description Default <code>font_family</code> <code>Literal['serif', 'sans-serif', 'monospace']</code> <p>Default font family.</p> <code>'sans-serif'</code> <code>base_font</code> <code>ShFontsetupFontProfile.FontType</code> <p>See <code>ShPGFRcFontsFontProfile</code>.</p> <code>'default'</code> <code>serif_font</code> <code>Optional[str]</code> <p>See <code>ShPGFRcFontsFontProfile</code>.</p> <code>None</code> <code>sans_serif_font</code> <code>Optional[str]</code> <p>See <code>ShPGFRcFontsFontProfile</code>.</p> <code>None</code> <code>monospace_font</code> <code>Optional[str]</code> <p>See <code>ShPGFRcFontsFontProfile</code>.</p> <code>None</code> <code>dpi</code> <code>Union[float, str]</code> <p>See <code>ShPresentationScaleProfile</code>.</p> <code>200.0</code> <code>**rc_extra</code> <code>Any</code> <p><code>rcParams</code> overrides.</p> <code>{}</code>"},{"location":"usage/shplot/profiles/builtin/#shplot.profiles.builtin.make_builtin_profile_builder","title":"<code>make_builtin_profile_builder(profile_cls: type[PlottingProfile], **base_kwargs: Any) -&gt; Callable[..., PlottingProfile]</code>","text":""}]}